{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar removePosition = require('unist-util-remove-position');\n\nmodule.exports = parse;\nvar C_NEWLINE = '\\n';\nvar EXPRESSION_LINE_BREAKS = /\\r\\n|\\r/g;\n/* Parse the bound file. */\n\nfunction parse() {\n  var self = this;\n  var value = String(self.file);\n  var start = {\n    line: 1,\n    column: 1,\n    offset: 0\n  };\n  var content = xtend(start);\n  var node;\n  /* Clean non-unix newlines: `\\r\\n` and `\\r` are all\n   * changed to `\\n`.  This should not affect positional\n   * information. */\n\n  value = value.replace(EXPRESSION_LINE_BREAKS, C_NEWLINE);\n\n  if (value.charCodeAt(0) === 0xFEFF) {\n    value = value.slice(1);\n    content.column++;\n    content.offset++;\n  }\n\n  node = {\n    type: 'root',\n    children: self.tokenizeBlock(value, content),\n    position: {\n      start: start,\n      end: self.eof || xtend(start)\n    }\n  };\n\n  if (!self.options.position) {\n    removePosition(node, true);\n  }\n\n  return node;\n}","map":{"version":3,"names":["xtend","require","removePosition","module","exports","parse","C_NEWLINE","EXPRESSION_LINE_BREAKS","self","value","String","file","start","line","column","offset","content","node","replace","charCodeAt","slice","type","children","tokenizeBlock","position","end","eof","options"],"sources":["/home/ghaz/personal_website/node_modules/remark-parse/lib/parse.js"],"sourcesContent":["'use strict';\n\nvar xtend = require('xtend');\nvar removePosition = require('unist-util-remove-position');\n\nmodule.exports = parse;\n\nvar C_NEWLINE = '\\n';\nvar EXPRESSION_LINE_BREAKS = /\\r\\n|\\r/g;\n\n/* Parse the bound file. */\nfunction parse() {\n  var self = this;\n  var value = String(self.file);\n  var start = {line: 1, column: 1, offset: 0};\n  var content = xtend(start);\n  var node;\n\n  /* Clean non-unix newlines: `\\r\\n` and `\\r` are all\n   * changed to `\\n`.  This should not affect positional\n   * information. */\n  value = value.replace(EXPRESSION_LINE_BREAKS, C_NEWLINE);\n\n  if (value.charCodeAt(0) === 0xFEFF) {\n    value = value.slice(1);\n\n    content.column++;\n    content.offset++;\n  }\n\n  node = {\n    type: 'root',\n    children: self.tokenizeBlock(value, content),\n    position: {\n      start: start,\n      end: self.eof || xtend(start)\n    }\n  };\n\n  if (!self.options.position) {\n    removePosition(node, true);\n  }\n\n  return node;\n}\n"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,4BAAD,CAA5B;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,sBAAsB,GAAG,UAA7B;AAEA;;AACA,SAASF,KAAT,GAAiB;EACf,IAAIG,IAAI,GAAG,IAAX;EACA,IAAIC,KAAK,GAAGC,MAAM,CAACF,IAAI,CAACG,IAAN,CAAlB;EACA,IAAIC,KAAK,GAAG;IAACC,IAAI,EAAE,CAAP;IAAUC,MAAM,EAAE,CAAlB;IAAqBC,MAAM,EAAE;EAA7B,CAAZ;EACA,IAAIC,OAAO,GAAGhB,KAAK,CAACY,KAAD,CAAnB;EACA,IAAIK,IAAJ;EAEA;AACF;AACA;;EACER,KAAK,GAAGA,KAAK,CAACS,OAAN,CAAcX,sBAAd,EAAsCD,SAAtC,CAAR;;EAEA,IAAIG,KAAK,CAACU,UAAN,CAAiB,CAAjB,MAAwB,MAA5B,EAAoC;IAClCV,KAAK,GAAGA,KAAK,CAACW,KAAN,CAAY,CAAZ,CAAR;IAEAJ,OAAO,CAACF,MAAR;IACAE,OAAO,CAACD,MAAR;EACD;;EAEDE,IAAI,GAAG;IACLI,IAAI,EAAE,MADD;IAELC,QAAQ,EAAEd,IAAI,CAACe,aAAL,CAAmBd,KAAnB,EAA0BO,OAA1B,CAFL;IAGLQ,QAAQ,EAAE;MACRZ,KAAK,EAAEA,KADC;MAERa,GAAG,EAAEjB,IAAI,CAACkB,GAAL,IAAY1B,KAAK,CAACY,KAAD;IAFd;EAHL,CAAP;;EASA,IAAI,CAACJ,IAAI,CAACmB,OAAL,CAAaH,QAAlB,EAA4B;IAC1BtB,cAAc,CAACe,IAAD,EAAO,IAAP,CAAd;EACD;;EAED,OAAOA,IAAP;AACD"},"metadata":{},"sourceType":"script"}