{"ast":null,"code":"'use strict';\n\nmodule.exports = atxHeading;\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_HASH = '#';\nvar MAX_ATX_COUNT = 6;\n\nfunction atxHeading(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var length = value.length + 1;\n  var index = -1;\n  var now = eat.now();\n  var subvalue = '';\n  var content = '';\n  var character;\n  var queue;\n  var depth;\n  /* Eat initial spacing. */\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n  }\n  /* Eat hashes. */\n\n\n  depth = 0;\n\n  while (++index <= length) {\n    character = value.charAt(index);\n\n    if (character !== C_HASH) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n    depth++;\n  }\n\n  if (depth > MAX_ATX_COUNT) {\n    return;\n  }\n\n  if (!depth || !settings.pedantic && value.charAt(index + 1) === C_HASH) {\n    return;\n  }\n\n  length = value.length + 1;\n  /* Eat intermediate white-space. */\n\n  queue = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    queue += character;\n  }\n  /* Exit when not in pedantic mode without spacing. */\n\n\n  if (!settings.pedantic && queue.length === 0 && character && character !== C_NEWLINE) {\n    return;\n  }\n\n  if (silent) {\n    return true;\n  }\n  /* Eat content. */\n\n\n  subvalue += queue;\n  queue = '';\n  content = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (!character || character === C_NEWLINE) {\n      break;\n    }\n\n    if (character !== C_SPACE && character !== C_TAB && character !== C_HASH) {\n      content += queue + character;\n      queue = '';\n      continue;\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_HASH) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    index--;\n  }\n\n  now.column += subvalue.length;\n  now.offset += subvalue.length;\n  subvalue += content + queue;\n  return eat(subvalue)({\n    type: 'heading',\n    depth: depth,\n    children: self.tokenizeInline(content, now)\n  });\n}","map":{"version":3,"names":["module","exports","atxHeading","C_NEWLINE","C_TAB","C_SPACE","C_HASH","MAX_ATX_COUNT","eat","value","silent","self","settings","options","length","index","now","subvalue","content","character","queue","depth","charAt","pedantic","column","offset","type","children","tokenizeInline"],"sources":["/home/ghaz/PersonalWebsite/node_modules/remark-parse/lib/tokenize/heading-atx.js"],"sourcesContent":["'use strict';\n\nmodule.exports = atxHeading;\n\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_HASH = '#';\n\nvar MAX_ATX_COUNT = 6;\n\nfunction atxHeading(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var length = value.length + 1;\n  var index = -1;\n  var now = eat.now();\n  var subvalue = '';\n  var content = '';\n  var character;\n  var queue;\n  var depth;\n\n  /* Eat initial spacing. */\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n  }\n\n  /* Eat hashes. */\n  depth = 0;\n\n  while (++index <= length) {\n    character = value.charAt(index);\n\n    if (character !== C_HASH) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n    depth++;\n  }\n\n  if (depth > MAX_ATX_COUNT) {\n    return;\n  }\n\n  if (\n    !depth ||\n    (!settings.pedantic && value.charAt(index + 1) === C_HASH)\n  ) {\n    return;\n  }\n\n  length = value.length + 1;\n\n  /* Eat intermediate white-space. */\n  queue = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    queue += character;\n  }\n\n  /* Exit when not in pedantic mode without spacing. */\n  if (\n    !settings.pedantic &&\n    queue.length === 0 &&\n    character &&\n    character !== C_NEWLINE\n  ) {\n    return;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  /* Eat content. */\n  subvalue += queue;\n  queue = '';\n  content = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (!character || character === C_NEWLINE) {\n      break;\n    }\n\n    if (\n      character !== C_SPACE &&\n      character !== C_TAB &&\n      character !== C_HASH\n    ) {\n      content += queue + character;\n      queue = '';\n      continue;\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_HASH) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    index--;\n  }\n\n  now.column += subvalue.length;\n  now.offset += subvalue.length;\n  subvalue += content + queue;\n\n  return eat(subvalue)({\n    type: 'heading',\n    depth: depth,\n    children: self.tokenizeInline(content, now)\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}