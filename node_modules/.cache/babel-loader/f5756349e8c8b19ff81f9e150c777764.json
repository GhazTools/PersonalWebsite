{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nvar locate = require('../locate/link');\n\nvar normalize = require('../util/normalize');\n\nmodule.exports = reference;\nreference.locator = locate;\nvar T_LINK = 'link';\nvar T_IMAGE = 'image';\nvar T_FOOTNOTE = 'footnote';\nvar REFERENCE_TYPE_SHORTCUT = 'shortcut';\nvar REFERENCE_TYPE_COLLAPSED = 'collapsed';\nvar REFERENCE_TYPE_FULL = 'full';\nvar C_CARET = '^';\nvar C_BACKSLASH = '\\\\';\nvar C_BRACKET_OPEN = '[';\nvar C_BRACKET_CLOSE = ']';\n\nfunction reference(eat, value, silent) {\n  var self = this;\n  var character = value.charAt(0);\n  var index = 0;\n  var length = value.length;\n  var subvalue = '';\n  var intro = '';\n  var type = T_LINK;\n  var referenceType = REFERENCE_TYPE_SHORTCUT;\n  var content;\n  var identifier;\n  var now;\n  var node;\n  var exit;\n  var queue;\n  var bracketed;\n  var depth;\n  /* Check whether we’re eating an image. */\n\n  if (character === '!') {\n    type = T_IMAGE;\n    intro = character;\n    character = value.charAt(++index);\n  }\n\n  if (character !== C_BRACKET_OPEN) {\n    return;\n  }\n\n  index++;\n  intro += character;\n  queue = '';\n  /* Check whether we’re eating a footnote. */\n\n  if (self.options.footnotes && value.charAt(index) === C_CARET) {\n    /* Exit if `![^` is found, so the `!` will be seen as text after this,\n     * and we’ll enter this function again when `[^` is found. */\n    if (type === T_IMAGE) {\n      return;\n    }\n\n    intro += C_CARET;\n    index++;\n    type = T_FOOTNOTE;\n  }\n  /* Eat the text. */\n\n\n  depth = 0;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === C_BRACKET_OPEN) {\n      bracketed = true;\n      depth++;\n    } else if (character === C_BRACKET_CLOSE) {\n      if (!depth) {\n        break;\n      }\n\n      depth--;\n    }\n\n    if (character === C_BACKSLASH) {\n      queue += C_BACKSLASH;\n      character = value.charAt(++index);\n    }\n\n    queue += character;\n    index++;\n  }\n\n  subvalue = queue;\n  content = queue;\n  character = value.charAt(index);\n\n  if (character !== C_BRACKET_CLOSE) {\n    return;\n  }\n\n  index++;\n  subvalue += character;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (!whitespace(character)) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n  /* Inline footnotes cannot have an identifier. */\n\n  if (type !== T_FOOTNOTE && character === C_BRACKET_OPEN) {\n    identifier = '';\n    queue += character;\n    index++;\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character === C_BRACKET_OPEN || character === C_BRACKET_CLOSE) {\n        break;\n      }\n\n      if (character === C_BACKSLASH) {\n        identifier += C_BACKSLASH;\n        character = value.charAt(++index);\n      }\n\n      identifier += character;\n      index++;\n    }\n\n    character = value.charAt(index);\n\n    if (character === C_BRACKET_CLOSE) {\n      referenceType = identifier ? REFERENCE_TYPE_FULL : REFERENCE_TYPE_COLLAPSED;\n      queue += identifier + character;\n      index++;\n    } else {\n      identifier = '';\n    }\n\n    subvalue += queue;\n    queue = '';\n  } else {\n    if (!content) {\n      return;\n    }\n\n    identifier = content;\n  }\n  /* Brackets cannot be inside the identifier. */\n\n\n  if (referenceType !== REFERENCE_TYPE_FULL && bracketed) {\n    return;\n  }\n\n  subvalue = intro + subvalue;\n\n  if (type === T_LINK && self.inLink) {\n    return null;\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  if (type === T_FOOTNOTE && content.indexOf(' ') !== -1) {\n    return eat(subvalue)({\n      type: 'footnote',\n      children: this.tokenizeInline(content, eat.now())\n    });\n  }\n\n  now = eat.now();\n  now.column += intro.length;\n  now.offset += intro.length;\n  identifier = referenceType === REFERENCE_TYPE_FULL ? identifier : content;\n  node = {\n    type: type + 'Reference',\n    identifier: normalize(identifier)\n  };\n\n  if (type === T_LINK || type === T_IMAGE) {\n    node.referenceType = referenceType;\n  }\n\n  if (type === T_LINK) {\n    exit = self.enterLink();\n    node.children = self.tokenizeInline(content, now);\n    exit();\n  } else if (type === T_IMAGE) {\n    node.alt = self.decode.raw(self.unescape(content), now) || null;\n  }\n\n  return eat(subvalue)(node);\n}","map":{"version":3,"names":["whitespace","require","locate","normalize","module","exports","reference","locator","T_LINK","T_IMAGE","T_FOOTNOTE","REFERENCE_TYPE_SHORTCUT","REFERENCE_TYPE_COLLAPSED","REFERENCE_TYPE_FULL","C_CARET","C_BACKSLASH","C_BRACKET_OPEN","C_BRACKET_CLOSE","eat","value","silent","self","character","charAt","index","length","subvalue","intro","type","referenceType","content","identifier","now","node","exit","queue","bracketed","depth","options","footnotes","inLink","indexOf","children","tokenizeInline","column","offset","enterLink","alt","decode","raw","unescape"],"sources":["/home/ghaz/personal_website/node_modules/remark-parse/lib/tokenize/reference.js"],"sourcesContent":["'use strict';\n\nvar whitespace = require('is-whitespace-character');\nvar locate = require('../locate/link');\nvar normalize = require('../util/normalize');\n\nmodule.exports = reference;\nreference.locator = locate;\n\nvar T_LINK = 'link';\nvar T_IMAGE = 'image';\nvar T_FOOTNOTE = 'footnote';\nvar REFERENCE_TYPE_SHORTCUT = 'shortcut';\nvar REFERENCE_TYPE_COLLAPSED = 'collapsed';\nvar REFERENCE_TYPE_FULL = 'full';\nvar C_CARET = '^';\nvar C_BACKSLASH = '\\\\';\nvar C_BRACKET_OPEN = '[';\nvar C_BRACKET_CLOSE = ']';\n\nfunction reference(eat, value, silent) {\n  var self = this;\n  var character = value.charAt(0);\n  var index = 0;\n  var length = value.length;\n  var subvalue = '';\n  var intro = '';\n  var type = T_LINK;\n  var referenceType = REFERENCE_TYPE_SHORTCUT;\n  var content;\n  var identifier;\n  var now;\n  var node;\n  var exit;\n  var queue;\n  var bracketed;\n  var depth;\n\n  /* Check whether we’re eating an image. */\n  if (character === '!') {\n    type = T_IMAGE;\n    intro = character;\n    character = value.charAt(++index);\n  }\n\n  if (character !== C_BRACKET_OPEN) {\n    return;\n  }\n\n  index++;\n  intro += character;\n  queue = '';\n\n  /* Check whether we’re eating a footnote. */\n  if (self.options.footnotes && value.charAt(index) === C_CARET) {\n    /* Exit if `![^` is found, so the `!` will be seen as text after this,\n     * and we’ll enter this function again when `[^` is found. */\n    if (type === T_IMAGE) {\n      return;\n    }\n\n    intro += C_CARET;\n    index++;\n    type = T_FOOTNOTE;\n  }\n\n  /* Eat the text. */\n  depth = 0;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === C_BRACKET_OPEN) {\n      bracketed = true;\n      depth++;\n    } else if (character === C_BRACKET_CLOSE) {\n      if (!depth) {\n        break;\n      }\n\n      depth--;\n    }\n\n    if (character === C_BACKSLASH) {\n      queue += C_BACKSLASH;\n      character = value.charAt(++index);\n    }\n\n    queue += character;\n    index++;\n  }\n\n  subvalue = queue;\n  content = queue;\n  character = value.charAt(index);\n\n  if (character !== C_BRACKET_CLOSE) {\n    return;\n  }\n\n  index++;\n  subvalue += character;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (!whitespace(character)) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  /* Inline footnotes cannot have an identifier. */\n  if (type !== T_FOOTNOTE && character === C_BRACKET_OPEN) {\n    identifier = '';\n    queue += character;\n    index++;\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character === C_BRACKET_OPEN || character === C_BRACKET_CLOSE) {\n        break;\n      }\n\n      if (character === C_BACKSLASH) {\n        identifier += C_BACKSLASH;\n        character = value.charAt(++index);\n      }\n\n      identifier += character;\n      index++;\n    }\n\n    character = value.charAt(index);\n\n    if (character === C_BRACKET_CLOSE) {\n      referenceType = identifier ? REFERENCE_TYPE_FULL : REFERENCE_TYPE_COLLAPSED;\n      queue += identifier + character;\n      index++;\n    } else {\n      identifier = '';\n    }\n\n    subvalue += queue;\n    queue = '';\n  } else {\n    if (!content) {\n      return;\n    }\n\n    identifier = content;\n  }\n\n  /* Brackets cannot be inside the identifier. */\n  if (referenceType !== REFERENCE_TYPE_FULL && bracketed) {\n    return;\n  }\n\n  subvalue = intro + subvalue;\n\n  if (type === T_LINK && self.inLink) {\n    return null;\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n\n  if (type === T_FOOTNOTE && content.indexOf(' ') !== -1) {\n    return eat(subvalue)({\n      type: 'footnote',\n      children: this.tokenizeInline(content, eat.now())\n    });\n  }\n\n  now = eat.now();\n  now.column += intro.length;\n  now.offset += intro.length;\n  identifier = referenceType === REFERENCE_TYPE_FULL ? identifier : content;\n\n  node = {\n    type: type + 'Reference',\n    identifier: normalize(identifier)\n  };\n\n  if (type === T_LINK || type === T_IMAGE) {\n    node.referenceType = referenceType;\n  }\n\n  if (type === T_LINK) {\n    exit = self.enterLink();\n    node.children = self.tokenizeInline(content, now);\n    exit();\n  } else if (type === T_IMAGE) {\n    node.alt = self.decode.raw(self.unescape(content), now) || null;\n  }\n\n  return eat(subvalue)(node);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}